---
all:
  vars:
    ### ansible
    ansible_connection: ssh
    ansible_user: root
    ansible_become: true
    # ansible_ssh_private_key_file: /tmp/confluent/certs/ssh-private.key
    mask_secrets: false
    mask_sensitive_logs: false
    mask_sensitive_diff: false

    ### confluent kafka
    confluent_server_enabled: true
    # confluent_package_version: "7.0.1"
    # confluent_license:

    ### confluent cli
    confluent_cli_download_enabled: true
    confluent_cli_version: "2.3.1"
    # confluent_cli_custom_download_url:
    confluent_cli_base_path: /opt/confluent-cli
    confluent_cli_path: "/usr/local/bin/confluent"

    ### custom yum repo file (rhel/centos)
    # repository_configuration: custom
    # custom_yum_repofile_filepath: /tmp/my-repo.repo
    ### custom apt repo file (ubuntu/debian)
    # repository_configuration: custom
    # custom_apt_repo_filepath: "/tmp/my-source.list"

    ### package install
    # installation_method: package
    ### archive install
    installation_method: archive
    confluent_archive_file_remote: true
    archive_destination_path: /opt/confluent
    # confluent_archive_file_source: "http://<hostname>/confluent-{{confluent_package_version}}.tar.gz"
    # confluent_archive_file_source: "/path/to/confluent-{{confluent_package_version}}.tar.gz"

    ### deployment strategy
    deployment_strategy: parallel
    # deployment_strategy: rolling

    ### sasl authentication
    # sasl_protocol: none
    # sasl_protocol: plain
    sasl_protocol: scram
    # sasl_protocol: kerberos

    ### zookeeper sasl
    zookeeper_sasl_protocol: digest
    zookeeper_client_authentication_type: digest
    zookeeper_quorum_authentication_type: mtls
    zookeeper_digest_users:
      admin:
        principal: zookeeper
        password: zookeeper-secret
      kafka_broker:
        principal: kafka
        password: kafka-secret

    ### scram users
    sasl_scram_users:
      client:
        principal: client
        password: client-secret
      admin:
        principal: kafka
        password: kafka-secret
      schema_registry:
        principal: schema-registry
        password: schema-registry-secret
      kafka_connect:
        principal: kafka-connect
        password: kafka-connect-secret
      kafka_rest:
        principal: kafka-rest
        password: kafka-rest-secret
      ksql:
        principal: ksqldb
        password: ksqldb-secret
      control_center:
        principal: control-center
        password: control-center-secret
      kafka_connect_replicator:
        principal: replicator
        password: replicator-secret

    ### tls
    ssl_enabled: true
    ssl_mutual_auth_enabled: false
    ssl_file_dir: /var/ssl/private
    # fips_enabled: true

    ### custom certs
    ssl_custom_certs: true
    ssl_custom_certs_remote_src: true
    ssl_ca_cert_filepath: "/tmp/confluent/certs/ca.crt"
    # ssl_signed_cert_filepath: "/tmp/confluent/certs/{{inventory_hostname}}-chain.crt"
    # ssl_key_filepath: "/tmp/confluent/certs/{{inventory_hostname}}.key"
    # ssl_key_password: changeit

    ### custom keystores and truststores
    # ssl_provided_keystore_and_truststore: true
    # ssl_keystore_filepath: "/tmp/confluent/certs/{{inventory_hostname}}-keystore.jks"
    # ssl_keystore_key_password: changeit
    # ssl_keystore_store_password: changeit
    # ssl_keystore_alias: localhost
    # ssl_truststore_filepath: "/tmp/confluent/certs/truststore.jks"
    # ssl_truststore_password: changeit
    # ssl_truststore_ca_cert_alias: RootCA

    ### rbac
    rbac_enabled: false

    ### component cluster group
    kafka_connect_cluster_ansible_group_names:
      - connect-cluster
    ksql_cluster_ansible_group_names:
      - ksql-cluster

    ### kafka listeners
    kafka_broker_configure_multiple_listeners: true
    kafka_broker_configure_control_plane_listener: true
    kafka_broker_inter_broker_listener_name: broker
    kafka_broker_control_plane_listener_name: controller
    kafka_broker_custom_listeners:
      internal:
        name: INTERNAL
        port: 9091
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        sasl_protocol: scram
      external:
        name: EXTERNAL
        port: 9092
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        sasl_protocol: scram
      broker:
        name: BROKER
        port: 9093
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        sasl_protocol: scram
      controller:
        name: CONTROLLER
        port: 9094
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        sasl_protocol: scram

    ### kafka internal listener
    schema_registry_kafka_listener_name: internal
    kafka_connect_kafka_listener_name: internal
    kafka_rest_kafka_listener_name: internal
    ksql_kafka_listener_name: internal
    ksql_processing_log_kafka_listener_name: internal
    control_center_kafka_listener_name: internal

    ### monitoring
    jmxexporter_enabled: true
    jmxexporter_url_remote: true
    jmxexporter_jar_url: https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.16.1/jmx_prometheus_javaagent-0.16.1.jar
    jmxexporter_jar_path: "{{archive_destination_path}}/prometheus/jmx_prometheus_javaagent.jar"
    zookeeper_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/zookeeper.yml"
    kafka_broker_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/kafka.yml"
    schema_registry_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/schema_registry.yml"
    kafka_rest_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/kafka_rest.yml"
    kafka_connect_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/kafka_connect.yml"
    ksql_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/ksql.yml"
    # jolokia_enabled: true
    # jolokia_url_remote: false
    # jolokia_jar_url: http://<inteneral-server>/jolokia-jvm-1.6.2-agent.jar

zookeeper:
  vars:
    zookeeper_user: root
    zookeeper_group: root
    zookeeper_log_dir: /mnt/zookeeper/logs

    # zookeeper_custom_java_args:
    zookeeper_service_environment_overrides:
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"
    zookeeper_custom_properties:
      dataDir: /mnt/zookeeper/data
      tickTime: 2000
      initLimit: 5
      syncLimit: 2
      maxClientCnxns: 0

      autopurge.snapRetainCount: 10
      autopurge.purgeInterval: 1
      admin.enableServer: "false"
      4lw.commands.whitelist: ruok,stat

      ssl.quorum.clientAuth: none

    ssl_signed_cert_filepath: "/tmp/confluent/certs/zookeeper-chain.crt"
    ssl_key_filepath: "/tmp/confluent/certs/zookeeper.key"
    ssl_key_password: changeit

  hosts:
    zookeeper1:
      ansible_host: 192.168.200.11
      zookeeper_id: 1
    zookeeper2:
      ansible_host: 192.168.200.12
      zookeeper_id: 2
    zookeeper3:
      ansible_host: 192.168.200.13
      zookeeper_id: 3

kafka_broker:
  vars:
    kafka_broker_user: root
    kafka_broker_group: root
    kafka_broker_log_dir: /mnt/kafka/logs

    # kafka_broker_custom_java_args:
    kafka_broker_service_environment_overrides:
      KAFKA_HEAP_OPTS: "-Xms1g -Xmx1g"
    kafka_broker_custom_properties:
      log.dirs: /mnt/kafka/data
      log.retention.hours: 168
      # log.retention.minutes: 10080
      # log.retention.bytes: 1073741824
      log.retention.check.interval.ms: 300000
      log.segment.bytes: 1073741824
      log.cleanup.policy: delete
      # log.cleaner.enable: "true"
      # log.cleaner.threads: 1

      num.io.threads: 16
      num.network.threads: 8
      num.partitions: 3
      num.recovery.threads.per.data.dir: 2

      default.replication.factor: 3
      min.insync.replicas: 2
      replica.lag.time.max.ms: 30000
      unclean.leader.election.enable: "false"

      auto.create.topics.enable: "false"
      group.initial.rebalance.delay.ms: 3000
      offsets.topic.replication.factor: 3
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: 3

      confluent.balancer.enable: "true"
      confluent.balancer.heal.uneven.load.trigger: EMPTY_BROKER
      confluent.balancer.disk.max.load: 0.85
      confluent.balancer.topic.replication.factor: 3

      confluent.tier.enable: "false"
      # confluent.tier.feature: "true"
      # confluent.tier.backend: S3
      # confluent.tier.s3.region: ap-northeast-2
      # confluent.tier.s3.bucket: kafka-tiered-storage
      # confluent.tier.s3.aws.endpoint.override:
      # confluent.tier.s3.cred.file.path: "{{archive_destination_path}}/aws/credentials"
      # confluent.tier.s3.sse.algorithm: none
      # confluent.tier.metadata.replication.factor: 3
      # confluent.tier.local.hotset.ms: 3600000
      # confluent.tier.local.hotset.bytes: 1073741824

    ssl_signed_cert_filepath: "/tmp/confluent/certs/kafka-chain.crt"
    ssl_key_filepath: "/tmp/confluent/certs/kafka.key"
    ssl_key_password: changeit

  hosts:
    kafka1:
      ansible_host: 192.168.200.11
      broker_id: 1
      # kafka_broker_custom_properties:
      #   broker.rack: ap-northeast-2a
      #   replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector
    kafka2:
      ansible_host: 192.168.200.12
      broker_id: 2
      # kafka_broker_custom_properties:
      #   broker.rack: ap-northeast-2b
      #   replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector
    kafka3:
      ansible_host: 192.168.200.13
      broker_id: 3
      # kafka_broker_custom_properties:
      #   broker.rack: ap-northeast-2c
      #   replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector

schema_registry:
  vars:
    schema_registry_user: root
    schema_registry_group: root
    schema_registry_log_dir: /mnt/schema-registry/logs

    # schema_registry_custom_java_args:
    schema_registry_service_environment_overrides:
      SCHEMA_REGISTRY_HEAP_OPTS: "-Xms512m -Xmx512m"
    schema_registry_custom_properties:
      schema.registry.group.id: schema-cluster
      schema.compatibility.level: backward

    ssl_signed_cert_filepath: "/tmp/confluent/certs/schema-registry-chain.crt"
    ssl_key_filepath: "/tmp/confluent/certs/schema-registry.key"
    ssl_key_password: changeit

  hosts:
    schema-registry1:
      ansible_host: 192.168.200.12
    schema-registry2:
      ansible_host: 192.168.200.13

kafka_connect:
  children:
    connect-cluster:
      vars:
        kafka_connect_user: root
        kafka_connect_group: root
        kafka_connect_log_dir: /mnt/kafka-connect/logs
        kafka_connect_group_id: connect-cluster

        # kafka_connect_custom_java_args:
        kafka_connect_service_environment_overrides:
          KAFKA_HEAP_OPTS: "-Xms1g -Xmx1g"
        kafka_connect_custom_properties:
          config.storage.topic: connect-cluster-configs
          config.storage.replication.factor: 3
          offset.storage.topic: connect-cluster-offsets
          offset.storage.partitions: 25
          offset.storage.replication.factor: 3
          offset.flush.interval.ms: 10000
          status.storage.topic: connect-cluster-status
          status.storage.partitions: 5
          status.storage.replication.factor: 3

        kafka_connect_plugins_path:
          - /usr/share/java
          - /usr/share/confluent-hub-components

        ssl_signed_cert_filepath: "/tmp/confluent/certs/kafka-connect-chain.crt"
        ssl_key_filepath: "/tmp/confluent/certs/kafka-connect.key"
        ssl_key_password: changeit

      hosts:
        kafka-connect1:
          ansible_host: 192.168.200.12
        kafka-connect2:
          ansible_host: 192.168.200.13

# kafka_rest:
#   vars:
#     kafka_rest_user: root
#     kafka_rest_group: root

#     kafka_rest_custom_java_args:
#     kafka_rest_service_environment_overrides:
#     kafka_rest_custom_properties:

#     ssl_signed_cert_filepath: "/tmp/confluent/certs/kafka-rest-chain.crt"
#     ssl_key_filepath: "/tmp/confluent/certs/kafka-rest.key"
#     ssl_key_password: changeit

#   hosts:
#     kafka-rest1:
#       ansible_host: 192.168.200.12
#     kafka-rest2:
#       ansible_host: 192.168.200.13

ksql:
  children:
    ksql-cluster:
      vars:
        ksql_user: root
        ksql_group: root
        ksql_log_dir: /mnt/ksqldb/logs
        ksql_service_id: ksql-cluster

        # ksql_custom_java_args:
        ksql_service_environment_overrides:
          KSQL_HEAP_OPTS: "-Xms1g -Xmx1g"
        ksql_custom_properties:
          ksql.streams.state.dir: /mnt/ksqldb/data

        ssl_signed_cert_filepath: "/tmp/confluent/certs/ksqldb-chain.crt"
        ssl_key_filepath: "/tmp/confluent/certs/ksqldb.key"
        ssl_key_password: changeit

      hosts:
        ksqldb1:
          ansible_host: 192.168.200.12
        ksqldb2:
          ansible_host: 192.168.200.13

control_center:
  vars:
    control_center_user: root
    control_center_group: root
    control_center_log_dir: /mnt/control-center/logs

    # control_center_custom_java_args:
    control_center_service_environment_overrides:
      # CONTROL_CENTER_HEAP_OPTS: "-Xms6g -Xmx6g"
      CONTROL_CENTER_HEAP_OPTS: "-Xms4g -Xmx4g"
    control_center_custom_properties:
      confluent.controlcenter.data.dir: /mnt/control-center/data
      confluent.controlcenter.command.topic: _confluent-command
      confluent.controlcenter.command.topic.replication: 3
      confluent.controlcenter.internal.topics.partitions: 12
      confluent.controlcenter.internal.topics.replication: 3
      confluent.metrics.topic: _confluent-metrics
      confluent.metrics.topic.partitions: 12
      confluent.metrics.topic.replication: 3
      confluent.controlcenter.streams.num.stream.threads: 8

      confluent.controlcenter.ui.autoupdate.enable: "false"
      confluent.controlcenter.ui.controller.chart.enable: "true"
      confluent.controlcenter.usage.data.collection.enable: "false"

    ssl_signed_cert_filepath: "/tmp/confluent/certs/control-center-chain.crt"
    ssl_key_filepath: "/tmp/confluent/certs/control-center.key"
    ssl_key_password: changeit

  hosts:
    control-center1:
      ansible_host: 192.168.200.11
