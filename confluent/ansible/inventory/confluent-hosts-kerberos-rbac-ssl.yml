---
all:
  vars:
    ### ansible
    ansible_connection: ssh
    ansible_user: root
    ansible_become: true
    # ansible_ssh_private_key_file: "/root/confluent/ssl/ssh-private.key"
    archive_owner: confluent
    archive_group: confluent
    mask_secrets: false
    mask_sensitive_logs: false
    mask_sensitive_diff: false

    ### custom yum repo file (rhel/centos)
    # repository_configuration: custom
    # custom_yum_repofile_filepath: "/root/confluent/repo/confluent-package.repo"
    ### custom apt repo file (ubuntu/debian)
    # repository_configuration: custom
    # custom_apt_repo_filepath: "/root/confluent/repo/confluent-package.list"

    ### jdk
    install_java: true
    redhat_java_package_name: java-11-openjdk-devel
    # ubuntu_java_package_name: openjdk-11-jdk
    # debian_java_package_name: openjdk-11-jdk
    # ubuntu_java_repository: ppa:openjdk-r/ppa

    ### confluent kafka
    confluent_server_enabled: true
    confluent_package_version: "7.0.1"
    # confluent_license: ""

    ### confluent cli
    confluent_cli_download_enabled: true
    confluent_cli_version: "2.4.0"
    # confluent_cli_custom_download_url:
    confluent_cli_base_path: "/opt/confluent-cli"
    confluent_cli_path: "/usr/local/bin/confluent"

    ### package install
    # installation_method: package
    ### archive install
    installation_method: archive
    archive_destination_path: "/opt/confluent"
    confluent_archive_file_remote: true
    # confluent_archive_file_source: "/root/confluent/archive/confluent-{{confluent_package_version}}.tar.gz"
    # confluent_archive_file_source: "http://<hostname>/archive/confluent-{{confluent_package_version}}.tar.gz"

    ### deployment strategy
    deployment_strategy: parallel
    # deployment_strategy: rolling

    ### sasl authentication
    sasl_protocol: kerberos
    kerberos_configure: true
    kerberos:
      realm: EXAMPLE.COM
      kdc_hostname: kerberos.example.com
      admin_hostname: kerberos.example.com
    zookeeper_sasl_protocol: kerberos
    zookeeper_client_authentication_type: kerberos
    zookeeper_quorum_authentication_type: digest
    zookeeper_digest_users:
      admin:
        principal: zookeeper
        password: zookeeper-secret
      kafka_broker:
        principal: kafka
        password: kafka-secret

    ### ssl
    ssl_enabled: true
    ssl_mutual_auth_enabled: false
    ssl_file_dir: "{{archive_destination_path}}/ssl"
    # fips_enabled: true

    ### custom certs
    ssl_custom_certs: true
    ssl_ca_cert_filepath: "/root/confluent/ssl/ca.crt"
    # ssl_signed_cert_filepath: "/root/confluent/ssl/{{inventory_hostname}}-chain.crt"
    # ssl_key_filepath: "/root/confluent/ssl/{{inventory_hostname}}.key"
    # ssl_key_password: changeit

    ### custom keystores and truststores
    # ssl_provided_keystore_and_truststore: true
    # ssl_keystore_filepath: "/root/confluent/ssl/{{inventory_hostname}}-keystore.jks"
    # ssl_keystore_key_password: changeit
    # ssl_keystore_store_password: changeit
    # ssl_keystore_alias: localhost
    # ssl_truststore_filepath: "/root/confluent/ssl/truststore.jks"
    # ssl_truststore_password: changeit
    # ssl_truststore_ca_cert_alias: RootCA

    ### rbac
    rbac_enabled: true
    mds_acls_enabled: true
    create_mds_certs: false
    token_services_public_pem_file: "/root/confluent/ssl/public.pem"
    token_services_private_pem_file: "/root/confluent/ssl/tokenKeypair.pem"

    ### ldap user
    mds_super_user: mds
    mds_super_user_password: mds-secret
    kafka_broker_ldap_user: kafka
    kafka_broker_ldap_password: kafka-secret
    schema_registry_ldap_user: schema-registry
    schema_registry_ldap_password: schema-registry-secret
    kafka_connect_ldap_user: kafka-connect
    kafka_connect_ldap_password: kafka-connect-secret
    ksql_ldap_user: ksqldb
    ksql_ldap_password: ksqldb-secret
    kafka_rest_ldap_user: kafka-rest
    kafka_rest_ldap_password: kafka-rest-secret
    control_center_ldap_user: control-center
    control_center_ldap_password: control-center-secret

    rbac_component_additional_system_admins:
      - kafkaadmin
      - control-center
    # kafka_broker_additional_system_admins:
    # schema_registry_additional_system_admins:
    # kafka_connect_additional_system_admins:
    # ksql_additional_system_admins:
    # control_center_additional_system_admins:

    ### cluster registry
    kafka_broker_cluster_name: clusterlocal
    schema_registry_cluster_name: schema-cluster
    kafka_connect_cluster_name: connect-cluster
    ksql_cluster_name: ksql-cluster

    ### component cluster group
    kafka_connect_cluster_ansible_group_names:
      - connect-cluster
    ksql_cluster_ansible_group_names:
      - ksql-cluster

    ### kafka listeners
    kafka_broker_configure_multiple_listeners: true
    kafka_broker_configure_control_plane_listener: true
    kafka_broker_inter_broker_listener_name: broker
    kafka_broker_control_plane_listener_name: controller
    kafka_broker_custom_listeners:
      internal:
        name: INTERNAL
        port: 9091
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        sasl_protocol: oauth
      external:
        name: EXTERNAL
        port: 9092
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        sasl_protocol: kerberos
      broker:
        name: BROKER
        port: 9093
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        sasl_protocol: kerberos
      controller:
        name: CONTROLLER
        port: 9094
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        sasl_protocol: kerberos

    ### kafka internal listener
    schema_registry_kafka_listener_name: internal
    kafka_connect_kafka_listener_name: internal
    kafka_rest_kafka_listener_name: internal
    ksql_kafka_listener_name: internal
    ksql_processing_log_kafka_listener_name: internal
    control_center_kafka_listener_name: internal

    ### monitoring
    jmxexporter_enabled: true
    jmxexporter_url_remote: true
    jmxexporter_jar_url: "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.16.1/jmx_prometheus_javaagent-0.16.1.jar"
    jmxexporter_jar_path: "{{archive_destination_path}}/prometheus/jmx_prometheus_javaagent.jar"
    zookeeper_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/zookeeper.yml"
    zookeeper_jmxexporter_port: 1234
    kafka_broker_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/kafka.yml"
    kafka_broker_jmxexporter_port: 1234
    schema_registry_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/schema_registry.yml"
    schema_registry_jmxexporter_port: 1234
    kafka_connect_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/kafka_connect.yml"
    kafka_connect_jmxexporter_port: 1234
    ksql_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/ksql.yml"
    ksql_jmxexporter_port: 1234
    kafka_rest_jmxexporter_config_path: "{{archive_destination_path}}/prometheus/kafka_rest.yml"
    kafka_rest_jmxexporter_port: 1234

zookeeper:
  vars:
    zookeeper_user: confluent
    zookeeper_group: confluent
    zookeeper_log_dir: /logs/zookeeper
    zookeeper_chroot: /clusterlocal

    zookeeper_custom_java_args: "-Dsun.security.krb5.disableReferrals=true"

    zookeeper_service_environment_overrides:
      ### memory options
      # KAFKA_HEAP_OPTS: "-Xms4g -Xmx4g"
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"
      ### performance options
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
      ### generic jvm settings
      # KAFKA_OPTS:
      ### gc options
      KAFKA_GC_LOG_OPTS: "-Xlog:gc*:file={{zookeeper_log_dir}}/zookeeper-gc.log:time,tags:filecount=10,filesize=100M"
      # KAFKA_GC_LOG_OPTS: "-Xloggc:{{zookeeper_log_dir}}/zookeeper-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"
      ### jmx settings
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
      # KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=9010"
      ### log4j settings
      KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:{{archive_destination_path}}/log4j/zookeeper-log4j.properties"

    zookeeper_custom_properties:
      dataDir: /data/zookeeper
      tickTime: 2000
      initLimit: 5
      syncLimit: 2
      maxClientCnxns: 0

      autopurge.snapRetainCount: 10
      autopurge.purgeInterval: 1
      admin.enableServer: "false"
      4lw.commands.whitelist: ruok,stat,srvr

    zookeeper_copy_files:
      - source_path: "/root/confluent/log4j/zookeeper-log4j.properties"
        destination_path: "{{archive_destination_path}}/log4j/zookeeper-log4j.properties"

    ssl_signed_cert_filepath: "/root/confluent/ssl/zookeeper-chain.crt"
    ssl_key_filepath: "/root/confluent/ssl/zookeeper.key"
    ssl_key_password: changeit

  hosts:
    zookeeper1.example.com:
      # ansible_host:
      zookeeper_id: 1
      zookeeper_keytab_path: "{{archive_destination_path}}/keytabs/zookeeper.keytab"
      zookeeper_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
      zookeeper_kerberos_principal: "zookeeper/{{inventory_hostname}}@EXAMPLE.COM"
    zookeeper2.example.com:
      # ansible_host:
      zookeeper_id: 2
      zookeeper_keytab_path: "{{archive_destination_path}}/keytabs/zookeeper.keytab"
      zookeeper_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
      zookeeper_kerberos_principal: "zookeeper/{{inventory_hostname}}@EXAMPLE.COM"
    zookeeper3.example.com:
      # ansible_host:
      zookeeper_id: 3
      zookeeper_keytab_path: "{{archive_destination_path}}/keytabs/zookeeper.keytab"
      zookeeper_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
      zookeeper_kerberos_principal: "zookeeper/{{inventory_hostname}}@EXAMPLE.COM"

kafka_broker:
  vars:
    kafka_broker_user: confluent
    kafka_broker_group: confluent
    kafka_broker_log_dir: /logs/kafka

    # kafka_broker_custom_java_args: ""

    kafka_broker_service_environment_overrides:
      ### memory options
      # KAFKA_HEAP_OPTS: "-Xms16g -Xmx16g"
      KAFKA_HEAP_OPTS: "-Xms1g -Xmx1g"
      ### performance options
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
      ### generic jvm settings
      # KAFKA_OPTS:
      ### gc options
      KAFKA_GC_LOG_OPTS: "-Xlog:gc*:file={{kafka_broker_log_dir}}/kafka-gc.log:time,tags:filecount=10,filesize=100M"
      # KAFKA_GC_LOG_OPTS: "-Xloggc:{{kafka_broker_log_dir}}/kafka-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"
      ### jmx settings
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
      # KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=9010"
      ### log4j settings
      KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:{{archive_destination_path}}/log4j/kafka-log4j.properties"
      ### aws credentials
      # AWS_ACCESS_KEY_ID:
      # AWS_SECRET_ACCESS_KEY:

    kafka_broker_custom_properties:
      log.dirs: /data/kafka
      log.retention.hours: 168
      # log.retention.minutes: 10080
      # log.retention.bytes: 1073741824
      log.retention.check.interval.ms: 300000
      log.segment.bytes: 1073741824
      log.cleanup.policy: delete
      # log.cleaner.enable: "true"
      # log.cleaner.threads: 1

      num.io.threads: 16
      num.network.threads: 8
      num.partitions: 3
      num.recovery.threads.per.data.dir: 2

      default.replication.factor: 3
      min.insync.replicas: 2
      replica.lag.time.max.ms: 30000
      unclean.leader.election.enable: "false"

      auto.create.topics.enable: "false"
      group.initial.rebalance.delay.ms: 3000
      offsets.topic.replication.factor: 3
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: 3

      confluent.balancer.enable: "true"
      confluent.balancer.heal.uneven.load.trigger: EMPTY_BROKER
      confluent.balancer.disk.max.load: 0.85
      confluent.balancer.topic.replication.factor: 3

      # confluent.metadata.server.openapi.enable: "true"

      ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
      ldap.com.sun.jndi.ldap.read.timeout: 3000
      ldap.java.naming.provider.url: ldap://ldap.example.com:389
      ldap.java.naming.security.principal: CN=admin,DC=example,DC=com
      ldap.java.naming.security.credentials: admin
      ldap.java.naming.security.authentication: simple
      ldap.user.object.class: account
      ldap.user.search.base: OU=rbac,DC=example,DC=com
      ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
      ldap.user.name.attribute: uid
      ldap.group.name.attribute: cn
      ldap.group.search.base: OU=rbac,DC=example,DC=com
      ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com

      confluent.tier.enable: "false"
      # confluent.tier.feature: "true"
      # confluent.tier.backend: S3
      # confluent.tier.s3.region: ap-northeast-2
      # confluent.tier.s3.bucket: kafka-tiered-storage
      # confluent.tier.s3.aws.endpoint.override:
      # confluent.tier.s3.cred.file.path: "{{archive_destination_path}}/aws/credentials"
      # confluent.tier.s3.sse.algorithm: none
      # confluent.tier.metadata.replication.factor: 3
      # confluent.tier.local.hotset.ms: 3600000
      # confluent.tier.local.hotset.bytes: 1073741824

      # confluent.license: "{{confluent_license}}"

    kafka_broker_copy_files:
      - source_path: "/root/confluent/log4j/kafka-log4j.properties"
        destination_path: "{{archive_destination_path}}/log4j/kafka-log4j.properties"
      # - source_path: "/root/confluent/aws/credentials"
      #   destination_path: "{{archive_destination_path}}/aws/credentials"

    ssl_signed_cert_filepath: "/root/confluent/ssl/kafka-chain.crt"
    ssl_key_filepath: "/root/confluent/ssl/kafka.key"
    ssl_key_password: changeit

  hosts:
    kafka1.example.com:
      # ansible_host:
      broker_id: 1
      kafka_broker_keytab_path: "{{archive_destination_path}}/keytabs/kafka.keytab"
      kafka_broker_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
      kafka_broker_kerberos_principal: "kafka/{{inventory_hostname}}@EXAMPLE.COM"
      # kafka_broker_custom_properties:
      #   broker.rack: ap-northeast-2a
      #   replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector
    kafka2.example.com:
      # ansible_host:
      broker_id: 2
      kafka_broker_keytab_path: "{{archive_destination_path}}/keytabs/kafka.keytab"
      kafka_broker_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
      kafka_broker_kerberos_principal: "kafka/{{inventory_hostname}}@EXAMPLE.COM"
      # kafka_broker_custom_properties:
      #   broker.rack: ap-northeast-2b
      #   replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector
    kafka3.example.com:
      # ansible_host:
      broker_id: 3
      kafka_broker_keytab_path: "{{archive_destination_path}}/keytabs/kafka.keytab"
      kafka_broker_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
      kafka_broker_kerberos_principal: "kafka/{{inventory_hostname}}@EXAMPLE.COM"
      # kafka_broker_custom_properties:
      #   broker.rack: ap-northeast-2c
      #   replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector

schema_registry:
  vars:
    schema_registry_user: confluent
    schema_registry_group: confluent
    schema_registry_log_dir: /logs/schema-registry

    # schema_registry_custom_java_args: ""

    schema_registry_service_environment_overrides:
      ### memory options
      # SCHEMA_REGISTRY_HEAP_OPTS: "-Xms2g -Xmx2g"
      SCHEMA_REGISTRY_HEAP_OPTS: "-Xms512m -Xmx512m"
      ### performance options
      SCHEMA_REGISTRY_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
      ### generic jvm settings
      # SCHEMA_REGISTRY_OPTS:
      ### gc options
      SCHEMA_REGISTRY_GC_LOG_OPTS: "-Xlog:gc*:file={{schema_registry_log_dir}}/schema-registry-gc.log:time,tags:filecount=10,filesize=100M"
      # SCHEMA_REGISTRY_GC_LOG_OPTS: "-Xloggc:{{schema_registry_log_dir}}/schema-registry-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"
      ### jmx settings
      SCHEMA_REGISTRY_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
      # SCHEMA_REGISTRY_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=9010"
      ### log4j settings
      SCHEMA_REGISTRY_LOG4J_OPTS: "-Dlog4j.configuration=file:{{archive_destination_path}}/log4j/schema-registry-log4j.properties"

    schema_registry_custom_properties:
      schema.registry.group.id: schema-cluster
      schema.compatibility.level: backward
      confluent.metadata.ssl.endpoint.identification.algorithm: HTTPS

      # confluent.license: "{{confluent_license}}"

    schema_registry_copy_files:
      - source_path: "/root/confluent/log4j/schema-registry-log4j.properties"
        destination_path: "{{archive_destination_path}}/log4j/schema-registry-log4j.properties"

    ssl_signed_cert_filepath: "/root/confluent/ssl/schema-registry-chain.crt"
    ssl_key_filepath: "/root/confluent/ssl/schema-registry.key"
    ssl_key_password: changeit

  hosts:
    schema-registry1.example.com:
      # ansible_host:
      schema_registry_keytab_path: "{{archive_destination_path}}/keytabs/schema-registry.keytab"
      schema_registry_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
      schema_registry_kerberos_principal: "schema-registry/{{inventory_hostname}}@EXAMPLE.COM"
    schema-registry2.example.com:
      # ansible_host:
      schema_registry_keytab_path: "{{archive_destination_path}}/keytabs/schema-registry.keytab"
      schema_registry_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
      schema_registry_kerberos_principal: "schema-registry/{{inventory_hostname}}@EXAMPLE.COM"

kafka_connect:
  children:
    connect-cluster:
      vars:
        kafka_connect_user: confluent
        kafka_connect_group: confluent
        kafka_connect_log_dir: /logs/kafka-connect
        kafka_connect_group_id: connect-cluster

        # kafka_connect_custom_java_args: ""

        kafka_connect_service_environment_overrides:
          ### memory options
          # KAFKA_HEAP_OPTS: "-Xms16g -Xmx16g"
          KAFKA_HEAP_OPTS: "-Xms1g -Xmx1g"
          ### performance options
          KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
          ### generic jvm settings
          # KAFKA_OPTS:
          ### gc options
          KAFKA_GC_LOG_OPTS: "-Xlog:gc*:file={{kafka_connect_log_dir}}/connect-gc.log:time,tags:filecount=10,filesize=100M"
          # KAFKA_GC_LOG_OPTS: "-Xloggc:{{kafka_connect_log_dir}}/connect-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"
          ### jmx settings
          KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
          # KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=9010"
          ### log4j settings
          KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:{{archive_destination_path}}/log4j/kafka-connect-log4j.properties"
          ### classpath
          CLASSPATH: "{{archive_destination_path}}/confluent-{{confluent_package_version}}/share/java/kafka-connect-replicator/*"
          ### aws credentials
          # AWS_ACCESS_KEY_ID:
          # AWS_SECRET_ACCESS_KEY:

        kafka_connect_custom_properties:
          config.storage.topic: connect-cluster-configs
          config.storage.replication.factor: 3
          offset.storage.topic: connect-cluster-offsets
          offset.storage.partitions: 25
          offset.storage.replication.factor: 3
          offset.flush.interval.ms: 10000
          status.storage.topic: connect-cluster-status
          status.storage.partitions: 5
          status.storage.replication.factor: 3

          confluent.metadata.ssl.endpoint.identification.algorithm: HTTPS
          connector.client.config.override.policy: All

          # confluent.license: "{{confluent_license}}"

        kafka_connect_custom_rest_extension_classes:
          - io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension

        kafka_connect_plugins_path:
          - "{{archive_destination_path}}/connect/plugins"

        kafka_connect_plugins_dest: "{{archive_destination_path}}/connect/plugins"
        # kafka_connect_plugins:
        #   - "/root/confluent/connect/example-connector.zip"
        # kafka_connect_plugins_remote:
        #   - "https://sftp.example.com/pub/kafka-connect/example-connector.zip"

        kafka_connect_confluent_hub_plugins_dest: "{{archive_destination_path}}/connect/plugins"
        # kafka_connect_confluent_hub_plugins:
        #   ### source
        #   - confluentinc/kafka-connect-datagen:latest
        #   - confluentinc/kafka-connect-replicator:latest
        #   - confluentinc/kafka-connect-s3-source:latest
        #   - confluentinc/kafka-connect-kinesis:latest
        #   - confluentinc/kafka-connect-azure-blob-storage-source:latest
        #   - confluentinc/kafka-connect-azure-service-bus:latest
        #   - confluentinc/kafka-connect-azure-event-hubs:latest
        #   - confluentinc/kafka-connect-gcs-source:latest
        #   - confluentinc/kafka-connect-gcp-pubsub:latest
        #   - confluentinc/kafka-connect-hdfs3-source:latest
        #   - confluentinc/kafka-connect-rabbitmq:latest
        #   - confluentinc/kafka-connect-activemq:latest
        #   - confluentinc/kafka-connect-jms:latest
        #   - confluentinc/kafka-connect-weblogic:latest
        #   - confluentinc/kafka-connect-oracle-cdc:latest
        #   - debezium/debezium-connector-postgresql:latest
        #   - debezium/debezium-connector-mysql:latest
        #   - debezium/debezium-connector-sqlserver:latest
        #   - debezium/debezium-connector-mongodb:latest
        #   - jcustenborder/kafka-connect-spooldir:latest
        #   ### sink
        #   - confluentinc/kafka-connect-s3:latest
        #   - confluentinc/kafka-connect-aws-dynamodb:latest
        #   - confluentinc/kafka-connect-aws-lambda:latest
        #   - confluentinc/kafka-connect-azure-blob-storage:latest
        #   - confluentinc/kafka-connect-azure-data-lake-gen2-storage:latest
        #   - confluentinc/kafka-connect-azure-functions:latest
        #   - confluentinc/kafka-connect-gcs:latest
        #   - confluentinc/kafka-connect-gcp-bigtable:latest
        #   - confluentinc/kafka-connect-gcp-functions:latest
        #   - confluentinc/kafka-connect-databricks-delta-lake:latest
        #   - confluentinc/kafka-connect-hdfs3:latest
        #   - confluentinc/kafka-connect-rabbitmq-sink:latest
        #   - confluentinc/kafka-connect-activemq-sink:latest
        #   - confluentinc/kafka-connect-elasticsearch:latest
        #   - confluentinc/kafka-connect-cassandra:latest
        #   - confluentinc/kafka-connect-hbase:latest
        #   - confluentinc/kafka-connect-jms-sink:latest
        #   - confluentinc/kafka-connect-http:latest
        #   - confluentinc/kafka-connect-prometheus-metrics:latest
        #   - snowflakeinc/snowflake-kafka-connector:latest
        #   - jcustenborder/kafka-connect-redis:latest
        #   - wepay/kafka-connect-bigquery:latest
        #   ### source and sink
        #   - confluentinc/kafka-connect-firebase:latest
        #   - confluentinc/kafka-connect-jdbc:latest
        #   - confluentinc/kafka-connect-mqtt:latest
        #   - confluentinc/kafka-connect-influxdb:latest
        #   - confluentinc/kafka-connect-sftp:latest
        #   - confluentinc/kafka-connect-ftps:latest
        #   - mongodb/kafka-connect-mongodb:latest
        #   - neo4j/kafka-connect-neo4j:latest
        #   ### transform
        #   - confluentinc/connect-transforms:latest
        #   ### converter
        #   - confluentinc/kafka-connect-json-schema-converter:latest
        #   - confluentinc/kafka-connect-avro-converter:latest
        #   - confluentinc/kafka-connect-protobuf-converter:latest

        # kafka_connect_connectors:
        #   - name: example-connector
        #     config:
        #       connector.class: ""
        #       tasks.max: "1"
        #       # confluent.license: "{{confluent_license}}"

        kafka_connect_copy_files:
          - source_path: "/root/confluent/log4j/kafka-connect-log4j.properties"
            destination_path: "{{archive_destination_path}}/log4j/kafka-connect-log4j.properties"

        ssl_signed_cert_filepath: "/root/confluent/ssl/kafka-connect-chain.crt"
        ssl_key_filepath: "/root/confluent/ssl/kafka-connect.key"
        ssl_key_password: changeit

      hosts:
        kafka-connect1.example.com:
          # ansible_host:
          kafka_connect_keytab_path: "{{archive_destination_path}}/keytabs/kafka-connect.keytab"
          kafka_connect_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
          kafka_connect_kerberos_principal: "kafka-connect/{{inventory_hostname}}@EXAMPLE.COM"
        kafka-connect2.example.com:
          # ansible_host:
          kafka_connect_keytab_path: "{{archive_destination_path}}/keytabs/kafka-connect.keytab"
          kafka_connect_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
          kafka_connect_kerberos_principal: "kafka-connect/{{inventory_hostname}}@EXAMPLE.COM"

ksql:
  children:
    ksql-cluster:
      vars:
        ksql_user: confluent
        ksql_group: confluent
        ksql_log_dir: /logs/ksqldb
        ksql_service_id: ksql-cluster

        # ksql_custom_java_args: ""

        ksql_service_environment_overrides:
          ### memory options
          # KSQL_HEAP_OPTS: "-Xms8g -Xmx8g"
          KSQL_HEAP_OPTS: "-Xms1g -Xmx1g"
          ### performance options
          KSQL_JVM_PERFORMANCE_OPTS: "-server -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
          ### generic jvm settings
          # KSQL_OPTS:
          ### gc options
          KSQL_GC_LOG_OPTS: "-Xlog:gc*:file={{ksql_log_dir}}/ksql-server-gc.log:time,tags:filecount=10,filesize=100M"
          # KSQL_GC_LOG_OPTS: "-Xloggc:{{ksql_log_dir}}/ksql-server-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"
          ### jmx settings
          KSQL_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
          # KSQL_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=9010"
          ### log4j settings
          KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:{{archive_destination_path}}/log4j/ksqldb-log4j.properties"

        ksql_custom_properties:
          ksql.streams.state.dir: /data/ksqldb
          confluent.metadata.ssl.endpoint.identification.algorithm: HTTPS

        ksql_copy_files:
          - source_path: "/root/confluent/log4j/ksqldb-log4j.properties"
            destination_path: "{{archive_destination_path}}/log4j/ksqldb-log4j.properties"

        ssl_signed_cert_filepath: "/root/confluent/ssl/ksqldb-chain.crt"
        ssl_key_filepath: "/root/confluent/ssl/ksqldb.key"
        ssl_key_password: changeit

      hosts:
        ksqldb1.example.com:
          # ansible_host:
          ksql_keytab_path: "{{archive_destination_path}}/keytabs/ksqldb.keytab"
          ksql_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
          ksql_kerberos_principal: "ksqldb/{{inventory_hostname}}@EXAMPLE.COM"
        ksqldb2.example.com:
          # ansible_host:
          ksql_keytab_path: "{{archive_destination_path}}/keytabs/ksqldb.keytab"
          ksql_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
          ksql_kerberos_principal: "ksqldb/{{inventory_hostname}}@EXAMPLE.COM"

# kafka_rest:
#   vars:
#     kafka_rest_user: confluent
#     kafka_rest_group: confluent
#     kafka_rest_log_dir: /logs/kafka-rest

#     # kafka_rest_custom_java_args: ""

#     kafka_rest_service_environment_overrides:
#       ### memory options
#       KAFKAREST_HEAP_OPTS: "-Xms256m -Xmx256m"
#       ### performance options
#       KAFKAREST_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
#       ### generic jvm settings and gc options
#       KAFKAREST_OPTS: "-Xlog:gc*:file={{kafka_rest_log_dir}}/kafka-rest-gc.log:time,tags:filecount=10,filesize=100M"
#       # KAFKAREST_OPTS: "-Xloggc:{{kafka_rest_log_dir}}/kafka-rest-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"
#       ### jmx settings
#       KAFKAREST_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
#       # KAFKAREST_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=9010"
#       ### log4j settings
#       KAFKAREST_LOG4J_OPTS: "-Dlog4j.configuration=file:{{archive_destination_path}}/log4j/kafka-rest-log4j.properties"

#     kafka_rest_custom_properties:
#       confluent.metadata.ssl.endpoint.identification.algorithm: HTTPS

#       # confluent.license: "{{confluent_license}}"

#     kafka_rest_copy_files:
#       - source_path: "/root/confluent/log4j/kafka-rest-log4j.properties"
#         destination_path: "{{archive_destination_path}}/log4j/kafka-rest-log4j.properties"

#     ssl_signed_cert_filepath: "/root/confluent/ssl/kafka-rest-chain.crt"
#     ssl_key_filepath: "/root/confluent/ssl/kafka-rest.key"
#     ssl_key_password: changeit

#   hosts:
#     kafka-rest1.example.com:
#       # ansible_host:
#       # kafka_rest_keytab_path: "{{archive_destination_path}}/keytabs/kafka-rest.keytab"
#       # kafka_rest_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
#       # kafka_rest_kerberos_principal: "kafka-rest/{{inventory_hostname}}@EXAMPLE.COM"
#     kafka-rest2.example.com:
#       # ansible_host:
#       # kafka_rest_keytab_path: "{{archive_destination_path}}/keytabs/kafka-rest.keytab"
#       # kafka_rest_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
#       # kafka_rest_kerberos_principal: "kafka-rest/{{inventory_hostname}}@EXAMPLE.COM"

control_center:
  vars:
    control_center_user: confluent
    control_center_group: confluent
    control_center_log_dir: /logs/control-center

    # control_center_custom_java_args: ""

    control_center_service_environment_overrides:
      ### memory options
      # CONTROL_CENTER_HEAP_OPTS: "-Xms6g -Xmx6g"
      CONTROL_CENTER_HEAP_OPTS: "-Xms4g -Xmx4g"
      ### performance options
      CONTROL_CENTER_JVM_PERFORMANCE_OPTS: "-server -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -XX:MaxInlineLevel=15 -Djava.awt.headless=true"
      ### generic jvm settings and gc options
      CONTROL_CENTER_OPTS: "-Xlog:gc*:file={{control_center_log_dir}}/control-center-gc.log:time,tags:filecount=10,filesize=100M"
      # CONTROL_CENTER_OPTS: "-Xloggc:{{control_center_log_dir}}/control-center-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"
      ### jmx settings
      CONTROL_CENTER_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
      # CONTROL_CENTER_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=9010"
      ### log4j settings
      CONTROL_CENTER_LOG4J_OPTS: "-Dlog4j.configuration=file:{{archive_destination_path}}/log4j/control-center-log4j.properties"

    control_center_service_overrides:
      Restart: "no"

    control_center_custom_properties:
      confluent.controlcenter.data.dir: /data/control-center
      confluent.controlcenter.command.topic: _confluent-command
      confluent.controlcenter.command.topic.replication: 3
      confluent.controlcenter.internal.topics.partitions: 12
      confluent.controlcenter.internal.topics.replication: 3
      confluent.metrics.topic: _confluent-metrics
      confluent.metrics.topic.partitions: 12
      confluent.metrics.topic.replication: 3
      confluent.controlcenter.streams.num.stream.threads: 8

      confluent.controlcenter.ui.autoupdate.enable: "false"
      confluent.controlcenter.ui.controller.chart.enable: "true"
      confluent.controlcenter.usage.data.collection.enable: "false"

      confluent.metadata.ssl.endpoint.identification.algorithm: HTTPS

      # confluent.license: "{{confluent_license}}"

    control_center_copy_files:
      - source_path: "/root/confluent/log4j/control-center-log4j.properties"
        destination_path: "{{archive_destination_path}}/log4j/control-center-log4j.properties"

    ssl_signed_cert_filepath: "/root/confluent/ssl/control-center-chain.crt"
    ssl_key_filepath: "/root/confluent/ssl/control-center.key"
    ssl_key_password: changeit

  hosts:
    control-center1.example.com:
      # ansible_host:
      control_center_keytab_path: "{{archive_destination_path}}/keytabs/control-center.keytab"
      control_center_kerberos_keytab_path: "/root/confluent/keytabs/{{inventory_hostname}}.keytab"
      control_center_kerberos_principal: "control-center/{{inventory_hostname}}@EXAMPLE.COM"
