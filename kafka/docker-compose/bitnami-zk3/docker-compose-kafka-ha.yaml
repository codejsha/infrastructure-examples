version: "3.8"

services:
  zookeeper1:
    image: docker.io/bitnami/zookeeper:3.9
    hostname: zookeeper1
    restart: unless-stopped
    environment:
      - ZOO_SERVER_ID=1
      - ZOO_SERVERS=zookeeper1:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888
      - ZOO_TICK_TIME=2000
      - ZOO_INIT_LIMIT=10
      - ZOO_SYNC_LIMIT=5
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_4LW_COMMANDS_WHITELIST=srvr,mntr,ruok
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181" ]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - zookeeper1-data:/bitnami/zookeeper

  zookeeper2:
    image: docker.io/bitnami/zookeeper:3.9
    hostname: zookeeper2
    restart: unless-stopped
    environment:
      - ZOO_SERVER_ID=2
      - ZOO_SERVERS=zookeeper1:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888
      - ZOO_TICK_TIME=2000
      - ZOO_INIT_LIMIT=10
      - ZOO_SYNC_LIMIT=5
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_4LW_COMMANDS_WHITELIST=srvr,mntr,ruok
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181" ]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - zookeeper2-data:/bitnami/zookeeper

  zookeeper3:
    image: docker.io/bitnami/zookeeper:3.9
    hostname: zookeeper3
    restart: unless-stopped
    environment:
      - ZOO_SERVER_ID=3
      - ZOO_SERVERS=zookeeper1:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888
      - ZOO_TICK_TIME=2000
      - ZOO_INIT_LIMIT=10
      - ZOO_SYNC_LIMIT=5
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_4LW_COMMANDS_WHITELIST=srvr,mntr,ruok
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181" ]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - zookeeper3-data:/bitnami/zookeeper

  kafka1:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka1
    restart: unless-stopped
    depends_on:
      zookeeper1:
        condition: service_healthy
      zookeeper2:
        condition: service_healthy
      zookeeper3:
        condition: service_healthy
    environment:
      ### broker
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_HEAP_OPTS=-Xmx1g -Xms1g
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9091,EXTERNAL://:9092,BROKER://:9093,CONTROLLER://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka1:9091,EXTERNAL://kafka1:9092,BROKER://kafka1:9093,CONTROLLER://kafka1:9094
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper1:2181,zookeeper2:2181,zookeeper3:2181/clusterlocal
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=BROKER
      - KAFKA_CFG_CONTROL_PLANE_LISTENER_NAME=CONTROLLER
      ### threads
      - KAFKA_CFG_NUM_NETWORK_THREADS=8
      - KAFKA_CFG_NUM_IO_THREADS=16
      - KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR=2
      - KAFKA_CFG_LOG_CLEANER_THREADS=1
      ### topic
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      ### replication
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_REPLICA_LAG_TIME_MAX_MS=30000
      - KAFKA_CFG_UNCLEAN_LEADER_ELECTION_ENABLE=false
      ### log
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_RETENTION_BYTES=1073741824
      - KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS=300000
      - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_CFG_LOG_CLEANUP_POLICY=delete
    volumes:
      - kafka1-data:/bitnami/kafka

  kafka2:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka2
    restart: unless-stopped
    depends_on:
      zookeeper1:
        condition: service_healthy
      zookeeper2:
        condition: service_healthy
      zookeeper3:
        condition: service_healthy
    environment:
      ### broker
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_HEAP_OPTS=-Xmx1g -Xms1g
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9091,EXTERNAL://:9092,BROKER://:9093,CONTROLLER://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka2:9091,EXTERNAL://kafka2:9092,BROKER://kafka2:9093,CONTROLLER://kafka2:9094
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper1:2181,zookeeper2:2181,zookeeper3:2181/clusterlocal
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=BROKER
      - KAFKA_CFG_CONTROL_PLANE_LISTENER_NAME=CONTROLLER
      ### threads
      - KAFKA_CFG_NUM_NETWORK_THREADS=8
      - KAFKA_CFG_NUM_IO_THREADS=16
      - KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR=2
      - KAFKA_CFG_LOG_CLEANER_THREADS=1
      ### topic
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      ### replication
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_REPLICA_LAG_TIME_MAX_MS=30000
      - KAFKA_CFG_UNCLEAN_LEADER_ELECTION_ENABLE=false
      ### log
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_RETENTION_BYTES=1073741824
      - KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS=300000
      - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_CFG_LOG_CLEANUP_POLICY=delete
    volumes:
      - kafka2-data:/bitnami/kafka

  kafka3:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka3
    restart: unless-stopped
    depends_on:
      zookeeper1:
        condition: service_healthy
      zookeeper2:
        condition: service_healthy
      zookeeper3:
        condition: service_healthy
    environment:
      ### broker
      - KAFKA_CFG_BROKER_ID=3
      - KAFKA_HEAP_OPTS=-Xmx1g -Xms1g
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9091,EXTERNAL://:9092,BROKER://:9093,CONTROLLER://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka3:9091,EXTERNAL://kafka3:9092,BROKER://kafka3:9093,CONTROLLER://kafka3:9094
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper1:2181,zookeeper2:2181,zookeeper3:2181/clusterlocal
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=BROKER
      - KAFKA_CFG_CONTROL_PLANE_LISTENER_NAME=CONTROLLER
      ### threads
      - KAFKA_CFG_NUM_NETWORK_THREADS=8
      - KAFKA_CFG_NUM_IO_THREADS=16
      - KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR=2
      - KAFKA_CFG_LOG_CLEANER_THREADS=1
      ### topic
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      ### replication
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_REPLICA_LAG_TIME_MAX_MS=30000
      - KAFKA_CFG_UNCLEAN_LEADER_ELECTION_ENABLE=false
      ### log
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_RETENTION_BYTES=1073741824
      - KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS=300000
      - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_CFG_LOG_CLEANUP_POLICY=delete
    volumes:
      - kafka3-data:/bitnami/kafka

  schema-registry:
    image: docker.io/confluentinc/cp-schema-registry:7.4.3
    hostname: schema-registry
    restart: unless-stopped
    depends_on:
      - kafka-broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-broker:9091
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: backward
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w %{http_code} http://localhost:8081" ]
      interval: 5s
      timeout: 3s
      retries: 3

  kafka-rest:
    image: docker.io/confluentinc/cp-kafka-rest:7.4.3
    hostname: kafka-rest
    restart: unless-stopped
    depends_on:
      - kafka-broker
      - schema-registry
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka-broker:9091
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w %{http_code} http://localhost:8082" ]
      interval: 5s
      timeout: 3s
      retries: 3

volumes:
  zookeeper1-data:
  zookeeper2-data:
  zookeeper3-data:
  kafka1-data:
  kafka2-data:
  kafka3-data:

networks:
  default:
    name: kafka-cluster
