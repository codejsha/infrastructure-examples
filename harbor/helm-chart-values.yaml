expose:
  type: ingress
  # type: loadBalancer
  tls:
    enabled: true
    certSource: auto
    auto:
      commonName: ""
      ### for loadbalancer
      # commonName: "core.harbor.example.com"
  ingress:
    hosts:
      core: core.harbor.example.com
      notary: notary.harbor.example.com
    annotations:
      kubernetes.io/ingress.class: "nginx"
      ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
  # loadBalancer:
  #   name: harbor
  #   IP: ""
  #   ports:
  #     httpPort: 80
  #     httpsPort: 443
  #     notaryPort: 4443

externalURL: https://core.harbor.example.com

persistence:
  enabled: true
  resourcePolicy: "keep"
  persistentVolumeClaim:
    registry:
      storageClass: standard
      # storageClass: rook-ceph-block
      # storageClass: local-path
      accessMode: ReadWriteOnce
      size: 5Gi
    chartmuseum:
      storageClass: standard
      # storageClass: rook-ceph-block
      # storageClass: local-path
      accessMode: ReadWriteOnce
      size: 5Gi
    jobservice:
      storageClass: standard
      # storageClass: rook-ceph-block
      # storageClass: local-path
      accessMode: ReadWriteOnce
      size: 1Gi
    database:
      storageClass: standard
      # storageClass: rook-ceph-block
      # storageClass: local-path
      accessMode: ReadWriteOnce
      size: 1Gi
    redis:
      storageClass: standard
      # storageClass: rook-ceph-block
      # storageClass: local-path
      accessMode: ReadWriteOnce
      size: 1Gi
    trivy:
      storageClass: standard
      # storageClass: rook-ceph-block
      # storageClass: local-path
      accessMode: ReadWriteOnce
      size: 5Gi
  imageChartStorage:
    disableredirect: true
    caBundleSecretName: minio-tenant-1-cert
    type: s3
    s3:
      region: anyregion
      # region: us-west-1
      bucket: harbor-storage
      accesskey: ${AWS_ACCESS_KEY}
      secretkey: ${AWS_SECRET_KEY}
      regionendpoint: ${AWS_REGION_ENDPOINT}
      # encrypt: false
      # keyid: mykeyid
      # secure: true
      # skipverify: true
      # v4auth: true
      # chunksize: "5242880"
      # rootdirectory: /s3/object/name/prefix
      # storageclass: STANDARD
      # multipartcopychunksize: "33554432"
      # multipartcopymaxconcurrency: 100
      # multipartcopythresholdsize: "33554432"

harborAdminPassword: "${HARBOR_ADMIN_PASSWORD}"

secretKey: "${HARBOR_SECRET_KEY}"

portal:
  replicas: 1
  # resources:
  #  requests:
  #    cpu: 100m
  #    memory: 256Mi

core:
  replicas: 1
  # resources:
  #  requests:
  #    cpu: 100m
  #    memory: 256Mi

registry:
  # registry:
  #   resources:
  #     requests:
  #       cpu: 100m
  #       memory: 256Mi
  # controller:
  #   resources:
  #     requests:
  #       cpu: 100m
  #       memory: 256Mi
  replicas: 1
  credentials:
    username: "${REGISTRY_USERNAME}"
    password: "${REGISTRY_PASSWORD}"
    htpasswd: "${REGISTRY_HTPASSWD}"

chartmuseum:
  replicas: 1
  # resources:
  #  requests:
  #    cpu: 100m
  #    memory: 256Mi

trivy:
  replicas: 1
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 1Gi

notary:
  server:
    replicas: 1
    # resources:
    #  requests:
    #    cpu: 100m
    #    memory: 256Mi
  signer:
    replicas: 1
    # resources:
    #  requests:
    #    cpu: 100m
    #    memory: 256Mi

database:
  type: external
  # internal:
  #   password: "${DATABASE_PASSWORD}"
  #   resources:
  #     requests:
  #       cpu: 100m
  #       memory: 256Mi
  external:
    host: "my-harbor-postgres-postgresql"
    port: "5432"
    username: "postgres"
    password: "${DATABASE_PASSWORD}"
    coreDatabase: "registry"
    notaryServerDatabase: "notary_server"
    notarySignerDatabase: "notary_signer"
    sslmode: "disable"

redis:
  type: internal
  # internal:
  #   resources:
  #     requests:
  #       cpu: 100m
  #       memory: 256Mi

exporter:
  replicas: 1
  # resources:
  # requests:
  #   cpu: 100m
  #   memory: 256Mi

metrics:
  enabled: true
  core:
    path: /metrics
    port: 8001
  registry:
    path: /metrics
    port: 8001
  exporter:
    path: /metrics
    port: 8001
