---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: java-triggertemplate
spec:
  params:
    - name: git-repo-url
    - name: git-ref
    - name: git-revision
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: pipelinerun-java-
      spec:
        pipelineRef:
          name: java-pipeline
        podTemplate:
          dnsConfig:
            nameservers:
              # - 10.10.10.10
              - 8.8.8.8
              - 168.126.63.1
        taskRunSpecs:
          - pipelineTaskName: clone-ci-repo
            taskServiceAccountName: git-ci-sa
          - pipelineTaskName: clone-cd-repo
            taskServiceAccountName: git-cd-sa
          - pipelineTaskName: commit-cd-repo
            taskServiceAccountName: git-cd-sa
        workspaces:
          - name: shared-workspace
            persistentvolumeclaim:
              claimName: takton-shared-workspace-pvc
          - name: maven-settings
            configMap:
              name: maven-settings-configmap
          - name: docker-config
            configMap:
              name: docker-config-configmap
          - name: kubeconfig
            configMap:
              name: kubeconfig-configmap
          - name: input-asset
            emptyDir: {}
            # configMap:
            #   name: git-cd-input-asset-configmap

        params:
          ### git (code repo) params
          - name: git-ci-repo-url
            value: $(tt.params.git-repo-url)
          - name: git-ci-revision
            value: $(tt.params.git-revision)
          - name: git-ci-subdir
            value: ""

          ### maven params
          - name: maven-goals
            value:
              # - -DskipTests
              - clean
              - deploy
          - name: maven-context-dir
            value: ./

          ### kaniko params
          - name: kaniko-image
            # value: registry.example.com/tomcat-starter:$(tt.params.git-revision)
            value: harbor.example.com/library/tomcat-starter:$(tt.params.git-revision)
          - name: kaniko-dockerfile
            value: ./Dockerfile
          - name: kaniko-context
            value: ./
          - name: kaniko-extra-args
            value:
              # - --destination=registry.example.com/tomcat-starter:latest
              # - --insecure-registry=registry.example.com
              - --destination=harbor.example.com/library/tomcat-starter:latest
              - --insecure-registry=harbor.example.com
              - --insecure-registry=nexus.example.com
              - --registry-mirror=nexus.example.com
              - --verbosity=info
          - name: kaniko-builder-image
            value: gcr.io/kaniko-project/executor:latest

          ### git (cd repo) params
          - name: git-cd-repo-url
            value: http://git.example.com/developer/my-project-cd.git
          - name: git-cd-revision
            value: main
          - name: git-cd-subdir
            value: ""

          ### kustomize params
          - name: kustomize-image
            # value: registry.example.com/kustomize-cli:latest
            value: harbor.example.com/library/kustomize-cli:latest
          - name: kustomize-base-dir
            value: ./
          - name: kustomize-script
            value: |

              tree base
              kustomize cfg tree base
              cd base
              # kustomize edit set image registry.example.com/tomcat-starter:$(tt.params.git-revision)
              kustomize edit set image harbor.example.com/library/tomcat-starter:$(tt.params.git-revision)
          - name: kustomize-args
            value:
              - ""

          ### git (cd repo) commit params
          - name: git-cd-user-name
            value: root
          - name: git-cd-user-email
            value: admin@example.com
          - name: git-cd-script
            value: |

              REF="$(tt.params.git-ref)"
              RELEASE_VERSION="${REF/refs\/heads\//}"

              git branch ${RELEASE_VERSION}
              git checkout ${RELEASE_VERSION}
              # cp $(workspaces.input.path)/* $(workspaces.source.path)
              git add .
              git status
              git commit -m "${RELEASE_VERSION}" --allow-empty
              git push origin ${RELEASE_VERSION}

          ### argocd params
          - name: argocd-app-name
            value: my-project
          - name: argocd-flags
            value: --insecure
          - name: argocd-version
            value: v2.1.0
