apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: gitlab-listener
spec:
  serviceAccountName: tekton-triggers-gitlab-sa
  triggers:
    - name: gitlab-push-events-trigger
      interceptors:
        - gitlab:
            secretRef:
              secretName: gitlab-auth
              secretKey: secretToken
            eventTypes:
              - Push Hook
      bindings:
        - ref: gitlab-push-binding
      template:
        name: gitlab-java-template
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: gitlab-push-binding
spec:
  params:
    - name: git-repo-url
      value: $(body.repository.git_http_url)
    - name: git-ref
      value: $(body.ref)
    - name: git-revision
      value: $(body.checkout_sha)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: gitlab-java-template
spec:
  params:
    - name: git-repo-url
    - name: git-ref
    - name: git-revision
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: pipelinerun-build
      spec:
        pipelineRef:
          name: java-build-pipeline
        serviceAccountName: tekton-triggers-gitlab-sa
        workspaces:
          - name: shared-workspace
            persistentvolumeclaim:
              claimName: tkn-shared-workspace-pvc
          - name: maven-settings
            configMap:
              name: maven-settings-store
          - name: docker-config
            configMap:
              name: docker-config-store
        params:
          - name: git-repo-url
            value: $(tt.params.git-repo-url)
          - name: git-revision
            value: $(tt.params.git-revision)
          - name: git-subdir
            value: ""
          - name: maven-goals
            value:
              # - -DskipTests
              - clean
              - deploy
          - name: maven-context-dir
            value: ./
          - name: kaniko-image
            value: registry.example.com/starter:$(tt.params.git-revision)
          - name: kaniko-dockerfile
            value: ./Dockerfile
          - name: kaniko-context
            value: ./
          - name: kaniko-extra-args
            value:
              - --insecure-registry=registry.example.com
              - --insecure-registry=sonatype-nexus-service.nexus-system:5003
              - --registry-mirror=sonatype-nexus-service.nexus-system:5003
              - --verbosity=info
          - name: kaniko-builder-image
            value: gcr.io/kaniko-project/executor:latest
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: pipelinerun-delivery
      spec:
        pipelineRef:
          name: java-delivery-pipeline
        serviceAccountName: tekton-triggers-gitlab-sa
        workspaces:
          - name: shared-workspace
            persistentvolumeclaim:
              claimName: tkn-shared-workspace-pvc
          - name: kube-config
            configMap:
              name: kube-config-store
          - name: input-asset
            emptyDir: {}
            # configMap:
            #   name: input-asset-store
        params:
          - name: git-repo-url
            value: http://gitlab.example.com:9480/root/myproject-cd.git
          - name: git-revision
            value: master
          - name: git-subdir
            value: ""
          - name: kube-script
            value: |
              kustomize edit set image registry.example.com/starter:$(tt.params.git-revision)
          - name: kube-args
            value: ""
          - name: git-user-name
            value: root
          - name: git-user-email
            value: admin@example.com
          - name: git-script
            value: |
              HEAD_COMMIT="${$(tt.params.git-ref)/refs\/heads\//}"
              RELEASE_VERSION="${HEAD_COMMIT}"

              git branch ${HEAD_COMMIT}
              git checkout ${HEAD_COMMIT}

              # cp $(workspaces.input.path)/* $(workspaces.source.path)
              git add .

              git commit -m "${HEAD_COMMIT}" --allow-empty
              git push origin ${HEAD_COMMIT}
