---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
  namespace: kafka
spec:
  kafka:
    replicas: 3
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
        authentication:
          type: tls
      - name: external1
        port: 9094
        type: nodeport
        tls: false
        configuration:
          bootstrap:
            nodePort: 30000
          brokers:
            - broker: 0
              advertisedHost: kubernetes.docker.internal
              nodePort: 30001
            - broker: 1
              advertisedHost: kubernetes.docker.internal
              nodePort: 30002
            - broker: 2
              advertisedHost: kubernetes.docker.internal
              nodePort: 30003
      - name: external2
        port: 9095
        type: nodeport
        tls: true
        authentication:
          type: tls
        configuration:
          bootstrap:
            nodePort: 30010
          brokers:
            - broker: 0
              advertisedHost: kubernetes.docker.internal
              nodePort: 30011
            - broker: 1
              advertisedHost: kubernetes.docker.internal
              nodePort: 30012
            - broker: 2
              advertisedHost: kubernetes.docker.internal
              nodePort: 30013
      # - name: external3
      #   port: 9096
      #   type: loadbalancer
      #   tls: true
      #   authentication:
      #     type: tls
      # - name: external4
      #   port: 9097
      #   type: ingress
      #   tls: true
      #   authentication:
      #     type: tls
      #   configuration:
      #     bootstrap:
      #       host: bootstrap.example.com
      #     brokers:
      #       - broker: 0
      #         host: broker-0.example.com
      #       - broker: 1
      #         host: broker-1.example.com
      #       - broker: 2
      #         host: broker-2.example.com
    config:
      num.partitions: 1
      default.replication.factor: 3
      min.insync.replicas: 2
      auto.create.topics.enable: true
      replica.fetch.max.bytes: 1048576
      offsets.topic.num.partitions: 50
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      log.retention.hours: 168
      log.segment.bytes: 1073741824
      log.cleaner.enable: true
      log.cleaner.threads: 1
      log.cleanup.policy: compact,delete
      log.retention.check.interval.ms: 300000
      num.network.threads: 3
      num.io.threads: 8
      num.recovery.threads.per.data.dir: 1
      queued.max.requests: 500
      socket.send.buffer.bytes: 102400
      socket.receive.buffer.bytes: 102400
      socket.request.max.bytes: 104857600
      replica.socket.receive.buffer.bytes: 65536
      unclean.leader.election.enable: false
      group.initial.rebalance.delay.ms: 3000
      replica.lag.time.max.ms: 30000
    storage:
      type: persistent-claim
      size: 100Gi
      deleteClaim: false
      # class: standard
      # class: hostpath
      # class: rook-ceph-block
      # class: local-path
      # overrides:
      #   - broker: 0
      #     class: my-storage-class-zone-a
      #   - broker: 1
      #     class: my-storage-class-zone-b
      #   - broker: 2
      #     class: my-storage-class-zone-c
    # template:
    #   statefulset:
    #     metadata:
    #       labels:
    #         my-label: my-value
    #   pod:
    #     tolerations:
    #       - key: "dedicated"
    #         operator: "Equal"
    #         value: "Kafka"
    #         effect: "NoSchedule"
    #     affinity:
    #       podAntiAffinity:
    #         requiredDuringSchedulingIgnoredDuringExecution:
    #           - labelSelector:
    #               matchExpressions:
    #                 - key: strimzi.io/name
    #                   operator: In
    #                   values:
    #                     - my-cluster-kafka
    #             topologyKey: "kubernetes.io/hostname"
    #       nodeAffinity:
    #         requiredDuringSchedulingIgnoredDuringExecution:
    #           nodeSelectorTerms:
    #             - matchExpressions:
    #                 - key: node-type
    #                   operator: In
    #                   values:
    #                     - fast-network

  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 100Gi
      deleteClaim: false
      # class: standard
      # class: hostpath
      # class: rook-ceph-block
      # class: local-path
      # overrides:
      #   - zookeeper: 0
      #     class: my-storage-class-zone-a
      #   - zookeeper: 1
      #     class: my-storage-class-zone-b
      #   - zookeeper: 2
      #     class: my-storage-class-zone-c
    # template:
    #   statefulset:
    #     metadata:
    #       labels:
    #         my-label: my-value
    #   pod:
    #     tolerations:
    #       - key: "dedicated"
    #         operator: "Equal"
    #         value: "Zookeeper"
    #         effect: "NoSchedule"
    #     affinity:
    #       podAntiAffinity:
    #         requiredDuringSchedulingIgnoredDuringExecution:
    #           - labelSelector:
    #               matchExpressions:
    #                 - key: strimzi.io/name
    #                   operator: In
    #                   values:
    #                     - my-cluster-zookeeper
    #             topologyKey: "kubernetes.io/hostname"
    #       nodeAffinity:
    #         requiredDuringSchedulingIgnoredDuringExecution:
    #           nodeSelectorTerms:
    #             - matchExpressions:
    #                 - key: node-type
    #                   operator: In
    #                   values:
    #                     - fast-network

  entityOperator:
    topicOperator:
      {}
      # watchedNamespace: my-topic-namespace
      # reconciliationIntervalSeconds: 60
    userOperator: {}
  # logging:
  #   type: inline
  #   loggers:
  #     kafka.root.logger.level: "INFO"
  #   type: external
  #   valueFrom:
  #     configMapKeyRef:
  #       name: logging-configmap
  #       key: log4j.properties
  # jmxTrans:
  #   outputDefinitions:
  #     - name: "fluentd"
  #       outputType: "com.googlecode.jmxtrans.model.output.GraphiteWriter"
  #       host: "http://my-fluentd"
  #       port: 9999
  #       flushDelay: 5
  #     - name: "stdout"
  #       outputType: "com.googlecode.jmxtrans.model.output.StdOutWriter"
  #   kafkaQueries:
  #     - targetMBean: "kafka.server:type=BrokerTopicMetrics,*"
  #       typeNames: ["name"]
  #       attributes:  ["Count"]
  #       outputs: ["standardOut"]
  # cruiseControl:
  #   brokerCapacity:
  #   config:
