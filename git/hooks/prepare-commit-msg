#!/usr/bin/env bash
trap 'echo "${BASH_SOURCE[0]}: line ${LINENO}: status ${?}: user ${USER}: func ${FUNCNAME[0]}"' ERR
set -o errexit
set -o errtrace

source ~/properties/git/hooks/.env
HOOKS_DIR=$(git rev-parse --git-path hooks)
REPO_ROOT=$(git rev-parse --show-toplevel)
echo "[pre-push] [INFO] environment: ${ENV_NAME}"
echo "[pre-push] [INFO] git hooks dir: ${HOOKS_DIR}"
echo "[pre-push] [INFO] repository root: ${REPO_ROOT}"

COMMIT_MSG_FILE=${1}
COMMIT_SOURCE=${2}

######################################################################

### print branch name
if git rev-parse --verify HEAD >/dev/null 2>&1; then
  BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
  echo "[prepare-commit-msg] [INFO] Branch name: ${BRANCH_NAME}"
fi

######################################################################

### validate commit message

echo "[prepare-commit-msg] [INFO] Commit message: $(cat ${COMMIT_MSG_FILE})"
COMMIT_MESSAGE="$(cat "${COMMIT_MSG_FILE}")"

if [ "${COMMIT_MESSAGE}" = "Initial commit" ] || [ "${COMMIT_MESSAGE}" = "initial commit" ]; then
  echo "[prepare-commit-msg] [INFO] Skip for initial commit."
  exit 0
fi

COMMIT_MESSAGE_PATTERN="^(feat|fix|docs|style|refactor|chore|test|gitflow-feature-stash): .+|^Merge (branch|pull request).*$"
if [[ -z "${COMMIT_MESSAGE}" ]]; then
  echo "[prepare-commit-msg] [ERROR] Commit message cannot be empty."
  exit 1
fi
if [[ ! "${COMMIT_MESSAGE}" =~ ${COMMIT_MESSAGE_PATTERN} ]]; then
  echo "[prepare-commit-msg] [ERROR] Commit message must start with a commit type (feat|fix|docs|style|refactor|chore|test) or be a merge commit."
  exit 1
fi
if echo "${COMMIT_MESSAGE}" | grep -q -E "\s{2,}"; then
  echo "[prepare-commit-msg] [ERROR] Commit message must not contain two spaces."
  exit 1
fi

exit 0
