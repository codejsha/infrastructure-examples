#!/bin/sh
trap 'echo "${BASH_SOURCE[0]}: line ${LINENO}: status ${?}: user ${USER}: func ${FUNCNAME[0]}"' ERR
set -o errexit
set -o errtrace

echo "[INFO] pre-commit hook"

source ~/properties/git/hooks/.env
HOOKS_DIR=$(git rev-parse --git-path hooks)
REPO_ROOT=$(git rev-parse --show-toplevel)
echo "[INFO] Environment: ${ENV_NAME}"
echo "[INFO] Git hooks dir: ${HOOKS_DIR}"
echo "[INFO] Repository root: ${REPO_ROOT}"

######################################################################

### Block specific keywords

BLOCKED_KEYWORDS="$(cat ${HOOKS_DIR}/blocked_keywords.txt)"
for KEYWORD in ${BLOCKED_KEYWORDS}; do
    if git diff --cached | grep ${KEYWORD}; then
        echo "[ERROR] Commit contains a blocked keyword: ${KEYWORD}"
        exit 1
    fi
done

######################################################################

### Signing commits

CURRENT_USER_NAME="$(git config user.name)"
CURRENT_USER_EMAIL="$(git config user.email)"
CURRENT_GPG_SIGNING_KEY="$(git config user.signingkey)"

### Check if the current GPG signing key exists
if [ -z "${CURRENT_GPG_SIGNING_KEY}" ]; then
    echo "[ERROR] No GPG key set for signing commits."
    exit 1
fi

### Check if the current user name and email match the env config
if [ "${CURRENT_USER_NAME}" != "${ENV_USER_NAME}" ] ||
    [ "${CURRENT_USER_EMAIL}" != "${ENV_USER_EMAIL}" ]; then
    echo "[ERROR] Commit rejected. Your user name or email is incorrect."
    exit 1
fi

GPG_USER_INFO="$(gpg --list-keys --with-colons "${ENV_GPG_SIGNING_KEY}" | grep "^uid:" | head -n 1 | cut -d: -f10)"
GPG_USER_NAME="${GPG_USER_INFO% <*}"
GPG_USER_EMAIL="${GPG_USER_INFO#*<}" && GPG_USER_EMAIL="${GPG_USER_EMAIL%>}"

### Check if the current GPG signing key matches the env config
if [ "${CURRENT_USER_NAME}" != "${GPG_USER_NAME}" ] ||
    [ "${CURRENT_USER_EMAIL}" != "${GPG_USER_EMAIL}" ]; then
    echo "[ERROR] Git config user name or email doesn't match the GPG key's user name or email."
    exit 1
fi

exit 0
