#!/usr/bin/env bash
trap 'echo "${BASH_SOURCE[0]}: line ${LINENO}: status ${?}: user ${USER}: func ${FUNCNAME[0]}"' ERR
set -o errexit
set -o errtrace

source ~/properties/git/hooks/.env
HOOKS_DIR=$(git rev-parse --git-path hooks)
REPO_ROOT=$(git rev-parse --show-toplevel)
echo "[pre-commit] [INFO] environment: ${ENV_NAME}"
echo "[pre-commit] [INFO] git hooks dir: ${HOOKS_DIR}"
echo "[pre-commit] [INFO] repository root: ${REPO_ROOT}"

######################################################################

### block specific keywords
BLOCKED_KEYWORDS="$(cat ${HOOKS_DIR}/blocked_keywords.txt)"
for KEYWORD in ${BLOCKED_KEYWORDS}; do
    if git diff --cached | grep ${KEYWORD}; then
        echo "[pre-commit] [ERROR] Commit contains a blocked keyword: ${KEYWORD}"
        exit 1
    fi
done

######################################################################

### signing commits

GPG_SIGNING_KEY="$(git config user.signingkey)"

### check if the current gpg signing key exists
echo "[pre-commit] [INFO] Current GPG signing key: ${GPG_SIGNING_KEY}"
if [ -z "${GPG_SIGNING_KEY}" ]; then
    echo "[pre-commit] [ERROR] No GPG key set for signing commits."
    exit 1
fi

### check if the current user name and email match the env config
echo "[pre-commit] [INFO] Current user name: ${GIT_AUTHOR_NAME}"
echo "[pre-commit] [INFO] Current user email: ${GIT_AUTHOR_EMAIL}"
if [ "${GIT_AUTHOR_NAME}" != "${ENV_USER_NAME}" ] ||
    [ "${GIT_AUTHOR_EMAIL}" != "${ENV_USER_EMAIL}" ]; then
    echo "[pre-commit] [ERROR] Commit rejected. Your user name or email is incorrect."
    exit 1
fi

### check if the current gpg signing key matches the env config
GPG_USER_INFO="$(gpg --list-keys --with-colons "${ENV_GPG_SIGNING_KEY}" | grep "^uid:" | head -n 1 | cut -d: -f10)"
GPG_USER_NAME="${GPG_USER_INFO% <*}"
GPG_USER_EMAIL="${GPG_USER_INFO#*<}" && GPG_USER_EMAIL="${GPG_USER_EMAIL%>}"
if [ "${GIT_AUTHOR_NAME}" != "${GPG_USER_NAME}" ] ||
    [ "${GIT_AUTHOR_EMAIL}" != "${GPG_USER_EMAIL}" ]; then
    echo "[pre-commit] [ERROR] Git config user name or email doesn't match the GPG key's user name or email."
    exit 1
fi
echo "[pre-commit] [INFO] GPG signing key matches the environment config."

######################################################################

### execute formatting

### format kotlin files
git diff --cached --name-only --diff-filter=ACM | rg '\.kt$|\.kts$' | while read -r FILE; do
    echo "[pre-commit] [INFO] Formatting file: ${FILE}"
    ktlint -F --editorconfig ${HOME}/properties/config/.editorconfig "${REPO_ROOT}/${FILE}"
    git add "${REPO_ROOT}/${FILE}"
done

### format golang files
git diff --cached --name-only --diff-filter=ACM | rg '\.go$' | while read -r FILE; do
    echo "[pre-commit] [INFO] Formatting file: ${FILE}"
    gofmt -s -w ${REPO_ROOT}/${FILE}
    goimports -w ${REPO_ROOT}/${FILE}
    git add "${REPO_ROOT}/${FILE}"
done

######################################################################

exit 0
